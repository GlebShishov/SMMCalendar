"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/projects/[id]";
exports.ids = ["pages/api/projects/[id]"];
exports.modules = {

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("mongoose");

/***/ }),

/***/ "next-auth/react":
/*!**********************************!*\
  !*** external "next-auth/react" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("next-auth/react");

/***/ }),

/***/ "(api)/./lib/dbConnect.js":
/*!**************************!*\
  !*** ./lib/dbConnect.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/smm-calendar\";\nif (!MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI environment variable\");\n}\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */ let cached = global.mongoose;\nif (!cached) {\n    cached = global.mongoose = {\n        conn: null,\n        promise: null\n    };\n}\nasync function dbConnect() {\n    if (cached.conn) {\n        return cached.conn;\n    }\n    if (!cached.promise) {\n        const opts = {\n            bufferCommands: false\n        };\n        cached.promise = mongoose__WEBPACK_IMPORTED_MODULE_0___default().connect(MONGODB_URI, opts).then((mongoose)=>{\n            return mongoose;\n        });\n    }\n    cached.conn = await cached.promise;\n    return cached.conn;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dbConnect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGJDb25uZWN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUVoQyxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixXQUFXLElBQUksd0NBQXdDO0FBRXZGLElBQUksQ0FBQ0EsV0FBVyxFQUFFO0lBQ2hCLE1BQU0sSUFBSUcsS0FBSyxDQUNiLG9EQUFvRCxDQUNyRCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7O0NBSUMsR0FDRCxJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ04sUUFBUTtBQUU1QixJQUFJLENBQUNLLE1BQU0sRUFBRTtJQUNYQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ04sUUFBUSxHQUFHO1FBQUVPLElBQUksRUFBRSxJQUFJO1FBQUVDLE9BQU8sRUFBRSxJQUFJO0tBQUUsQ0FBQztBQUMzRCxDQUFDO0FBRUQsZUFBZUMsU0FBUyxHQUFHO0lBQ3pCLElBQUlKLE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO1FBQ2YsT0FBT0YsTUFBTSxDQUFDRSxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLEVBQUU7UUFDbkIsTUFBTUUsSUFBSSxHQUFHO1lBQ1hDLGNBQWMsRUFBRSxLQUFLO1NBQ3RCO1FBRUROLE1BQU0sQ0FBQ0csT0FBTyxHQUFHUix1REFBZ0IsQ0FBQ0MsV0FBVyxFQUFFUyxJQUFJLENBQUMsQ0FBQ0csSUFBSSxDQUFDLENBQUNiLFFBQVEsR0FBSztZQUN0RSxPQUFPQSxRQUFRLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0RLLE1BQU0sQ0FBQ0UsSUFBSSxHQUFHLE1BQU1GLE1BQU0sQ0FBQ0csT0FBTyxDQUFDO0lBQ25DLE9BQU9ILE1BQU0sQ0FBQ0UsSUFBSSxDQUFDO0FBQ3JCLENBQUM7QUFFRCxpRUFBZUUsU0FBUyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21tLWNvbnRlbnQtY2FsZW5kYXIvLi9saWIvZGJDb25uZWN0LmpzPzFkM2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcblxuY29uc3QgTU9OR09EQl9VUkkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSB8fCAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9zbW0tY2FsZW5kYXInO1xuXG5pZiAoIU1PTkdPREJfVVJJKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnUGxlYXNlIGRlZmluZSB0aGUgTU9OR09EQl9VUkkgZW52aXJvbm1lbnQgdmFyaWFibGUnXG4gICk7XG59XG5cbi8qKlxuICogR2xvYmFsIGlzIHVzZWQgaGVyZSB0byBtYWludGFpbiBhIGNhY2hlZCBjb25uZWN0aW9uIGFjcm9zcyBob3QgcmVsb2Fkc1xuICogaW4gZGV2ZWxvcG1lbnQuIFRoaXMgcHJldmVudHMgY29ubmVjdGlvbnMgZ3Jvd2luZyBleHBvbmVudGlhbGx5XG4gKiBkdXJpbmcgQVBJIFJvdXRlIHVzYWdlLlxuICovXG5sZXQgY2FjaGVkID0gZ2xvYmFsLm1vbmdvb3NlO1xuXG5pZiAoIWNhY2hlZCkge1xuICBjYWNoZWQgPSBnbG9iYWwubW9uZ29vc2UgPSB7IGNvbm46IG51bGwsIHByb21pc2U6IG51bGwgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGJDb25uZWN0KCkge1xuICBpZiAoY2FjaGVkLmNvbm4pIHtcbiAgICByZXR1cm4gY2FjaGVkLmNvbm47XG4gIH1cblxuICBpZiAoIWNhY2hlZC5wcm9taXNlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIGJ1ZmZlckNvbW1hbmRzOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgY2FjaGVkLnByb21pc2UgPSBtb25nb29zZS5jb25uZWN0KE1PTkdPREJfVVJJLCBvcHRzKS50aGVuKChtb25nb29zZSkgPT4ge1xuICAgICAgcmV0dXJuIG1vbmdvb3NlO1xuICAgIH0pO1xuICB9XG4gIGNhY2hlZC5jb25uID0gYXdhaXQgY2FjaGVkLnByb21pc2U7XG4gIHJldHVybiBjYWNoZWQuY29ubjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGJDb25uZWN0O1xuIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwiTU9OR09EQl9VUkkiLCJwcm9jZXNzIiwiZW52IiwiRXJyb3IiLCJjYWNoZWQiLCJnbG9iYWwiLCJjb25uIiwicHJvbWlzZSIsImRiQ29ubmVjdCIsIm9wdHMiLCJidWZmZXJDb21tYW5kcyIsImNvbm5lY3QiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/dbConnect.js\n");

/***/ }),

/***/ "(api)/./models/Project.js":
/*!***************************!*\
  !*** ./models/Project.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\nconst DayContentSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    socialNetwork: {\n        type: String,\n        default: \"\"\n    },\n    images: {\n        type: [\n            String\n        ],\n        default: []\n    },\n    text: {\n        type: String,\n        default: \"\"\n    }\n});\nconst ProjectSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    name: {\n        type: String,\n        required: [\n            true,\n            \"Please provide a project name\"\n        ],\n        trim: true\n    },\n    owner: {\n        type: (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema.Types.ObjectId),\n        ref: \"User\",\n        required: true\n    },\n    days: {\n        type: [\n            DayContentSchema\n        ],\n        default: Array(7).fill({\n            socialNetwork: \"\",\n            images: [],\n            text: \"\"\n        })\n    },\n    companyName: {\n        type: String,\n        default: \"\"\n    },\n    companyDescription: {\n        type: String,\n        default: \"\"\n    },\n    companyWebsite: {\n        type: String,\n        default: \"\"\n    },\n    socialLinks: {\n        type: Map,\n        of: String,\n        default: {}\n    },\n    imagePrompt: {\n        type: String,\n        default: \"\"\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n    updatedAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((mongoose__WEBPACK_IMPORTED_MODULE_0___default().models.Project) || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model(\"Project\", ProjectSchema));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9tb2RlbHMvUHJvamVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFFaEMsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUQsd0RBQWUsQ0FBQztJQUMzQ0csYUFBYSxFQUFFO1FBQ2JDLElBQUksRUFBRUMsTUFBTTtRQUNaQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0RDLE1BQU0sRUFBRTtRQUNOSCxJQUFJLEVBQUU7WUFBQ0MsTUFBTTtTQUFDO1FBQ2RDLE9BQU8sRUFBRSxFQUFFO0tBQ1o7SUFDREUsSUFBSSxFQUFFO1FBQ0pKLElBQUksRUFBRUMsTUFBTTtRQUNaQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0NBQ0YsQ0FBQztBQUVGLE1BQU1HLGFBQWEsR0FBRyxJQUFJVCx3REFBZSxDQUFDO0lBQ3hDVSxJQUFJLEVBQUU7UUFDSk4sSUFBSSxFQUFFQyxNQUFNO1FBQ1pNLFFBQVEsRUFBRTtZQUFDLElBQUk7WUFBRSwrQkFBK0I7U0FBQztRQUNqREMsSUFBSSxFQUFFLElBQUk7S0FDWDtJQUNEQyxLQUFLLEVBQUU7UUFDTFQsSUFBSSxFQUFFSix1RUFBOEI7UUFDcENnQixHQUFHLEVBQUUsTUFBTTtRQUNYTCxRQUFRLEVBQUUsSUFBSTtLQUNmO0lBQ0RNLElBQUksRUFBRTtRQUNKYixJQUFJLEVBQUU7WUFBQ0gsZ0JBQWdCO1NBQUM7UUFDeEJLLE9BQU8sRUFBRVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUM7WUFDckJoQixhQUFhLEVBQUUsRUFBRTtZQUNqQkksTUFBTSxFQUFFLEVBQUU7WUFDVkMsSUFBSSxFQUFFLEVBQUU7U0FDVCxDQUFDO0tBQ0g7SUFDRFksV0FBVyxFQUFFO1FBQ1hoQixJQUFJLEVBQUVDLE1BQU07UUFDWkMsT0FBTyxFQUFFLEVBQUU7S0FDWjtJQUNEZSxrQkFBa0IsRUFBRTtRQUNsQmpCLElBQUksRUFBRUMsTUFBTTtRQUNaQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0RnQixjQUFjLEVBQUU7UUFDZGxCLElBQUksRUFBRUMsTUFBTTtRQUNaQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0RpQixXQUFXLEVBQUU7UUFDWG5CLElBQUksRUFBRW9CLEdBQUc7UUFDVEMsRUFBRSxFQUFFcEIsTUFBTTtRQUNWQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0RvQixXQUFXLEVBQUU7UUFDWHRCLElBQUksRUFBRUMsTUFBTTtRQUNaQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0RxQixTQUFTLEVBQUU7UUFDVHZCLElBQUksRUFBRXdCLElBQUk7UUFDVnRCLE9BQU8sRUFBRXNCLElBQUksQ0FBQ0MsR0FBRztLQUNsQjtJQUNEQyxTQUFTLEVBQUU7UUFDVDFCLElBQUksRUFBRXdCLElBQUk7UUFDVnRCLE9BQU8sRUFBRXNCLElBQUksQ0FBQ0MsR0FBRztLQUNsQjtDQUNGLENBQUM7QUFFRixpRUFBZTdCLGdFQUF1QixJQUFJQSxxREFBYyxDQUFDLFNBQVMsRUFBRVMsYUFBYSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbW0tY29udGVudC1jYWxlbmRhci8uL21vZGVscy9Qcm9qZWN0LmpzP2NiMTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcblxuY29uc3QgRGF5Q29udGVudFNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICBzb2NpYWxOZXR3b3JrOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICBpbWFnZXM6IHtcbiAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICBkZWZhdWx0OiBbXSxcbiAgfSxcbiAgdGV4dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgfSxcbn0pO1xuXG5jb25zdCBQcm9qZWN0U2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIG5hbWU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlIHByb3ZpZGUgYSBwcm9qZWN0IG5hbWUnXSxcbiAgICB0cmltOiB0cnVlLFxuICB9LFxuICBvd25lcjoge1xuICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICByZWY6ICdVc2VyJyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgZGF5czoge1xuICAgIHR5cGU6IFtEYXlDb250ZW50U2NoZW1hXSxcbiAgICBkZWZhdWx0OiBBcnJheSg3KS5maWxsKHtcbiAgICAgIHNvY2lhbE5ldHdvcms6ICcnLFxuICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgIHRleHQ6ICcnLFxuICAgIH0pLFxuICB9LFxuICBjb21wYW55TmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgfSxcbiAgY29tcGFueURlc2NyaXB0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICBjb21wYW55V2Vic2l0ZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgfSxcbiAgc29jaWFsTGlua3M6IHtcbiAgICB0eXBlOiBNYXAsXG4gICAgb2Y6IFN0cmluZyxcbiAgICBkZWZhdWx0OiB7fSxcbiAgfSxcbiAgaW1hZ2VQcm9tcHQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJycsXG4gIH0sXG4gIGNyZWF0ZWRBdDoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogRGF0ZS5ub3csXG4gIH0sXG4gIHVwZGF0ZWRBdDoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogRGF0ZS5ub3csXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9uZ29vc2UubW9kZWxzLlByb2plY3QgfHwgbW9uZ29vc2UubW9kZWwoJ1Byb2plY3QnLCBQcm9qZWN0U2NoZW1hKTtcbiJdLCJuYW1lcyI6WyJtb25nb29zZSIsIkRheUNvbnRlbnRTY2hlbWEiLCJTY2hlbWEiLCJzb2NpYWxOZXR3b3JrIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJpbWFnZXMiLCJ0ZXh0IiwiUHJvamVjdFNjaGVtYSIsIm5hbWUiLCJyZXF1aXJlZCIsInRyaW0iLCJvd25lciIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJkYXlzIiwiQXJyYXkiLCJmaWxsIiwiY29tcGFueU5hbWUiLCJjb21wYW55RGVzY3JpcHRpb24iLCJjb21wYW55V2Vic2l0ZSIsInNvY2lhbExpbmtzIiwiTWFwIiwib2YiLCJpbWFnZVByb21wdCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJ1cGRhdGVkQXQiLCJtb2RlbHMiLCJQcm9qZWN0IiwibW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./models/Project.js\n");

/***/ }),

/***/ "(api)/./pages/api/projects/[id].js":
/*!************************************!*\
  !*** ./pages/api/projects/[id].js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_dbConnect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/dbConnect */ \"(api)/./lib/dbConnect.js\");\n/* harmony import */ var _models_Project__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../models/Project */ \"(api)/./models/Project.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/react */ \"next-auth/react\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// In-memory projects storage for test users\nconst TEST_USER_IDS = [\n    \"test-user-123\",\n    \"test-user-222\"\n];\n// This is imported from the index.js file at runtime\n// We're declaring it here for clarity but it will use the same array\nlet testUserProjects = global.testUserProjects || [];\nif (!global.testUserProjects) {\n    global.testUserProjects = testUserProjects;\n}\n// Save function from index.js\nconst saveTestProjects = global.saveTestProjects || (()=>{\n    console.error(\"saveTestProjects function not available\");\n});\nasync function handler(req, res) {\n    const session = await (0,next_auth_react__WEBPACK_IMPORTED_MODULE_2__.getSession)({\n        req\n    });\n    const { id  } = req.query;\n    const demoMode = req.query.demo === \"true\";\n    console.log(\"API request for project:\", id);\n    console.log(\"Session:\", session ? {\n        userId: session.user.id,\n        username: session.user.username\n    } : \"No session\");\n    console.log(\"Demo mode:\", demoMode);\n    // Если режим демонстрации и метод GET, разрешаем доступ без авторизации\n    if (demoMode && req.method === \"GET\") {\n        // Для демо-режима используем тестовые проекты\n        return handleDemoMode(req, res, id);\n    }\n    // Для остальных запросов требуется авторизация\n    if (!session) {\n        console.log(\"Not authenticated, returning 401\");\n        return res.status(401).json({\n            message: \"Not authenticated\"\n        });\n    }\n    // Handle test user separately (no DB connection needed)\n    if (TEST_USER_IDS.includes(session.user.id)) {\n        console.log(\"Handling test user:\", session.user.id);\n        return handleTestUser(req, res, session, id);\n    }\n    // For regular users, use MongoDB\n    try {\n        await (0,_lib_dbConnect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        switch(req.method){\n            case \"GET\":\n                try {\n                    const project = await _models_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findOne({\n                        _id: id,\n                        owner: session.user.id\n                    });\n                    if (!project) {\n                        return res.status(404).json({\n                            success: false,\n                            message: \"Project not found\"\n                        });\n                    }\n                    res.status(200).json({\n                        success: true,\n                        data: project\n                    });\n                } catch (error) {\n                    res.status(400).json({\n                        success: false,\n                        message: error.message\n                    });\n                }\n                break;\n            case \"PUT\":\n                try {\n                    const project1 = await _models_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findOneAndUpdate({\n                        _id: id,\n                        owner: session.user.id\n                    }, {\n                        ...req.body,\n                        updatedAt: Date.now()\n                    }, {\n                        new: true,\n                        runValidators: true\n                    });\n                    if (!project1) {\n                        return res.status(404).json({\n                            success: false,\n                            message: \"Project not found\"\n                        });\n                    }\n                    res.status(200).json({\n                        success: true,\n                        data: project1\n                    });\n                } catch (error1) {\n                    res.status(400).json({\n                        success: false,\n                        message: error1.message\n                    });\n                }\n                break;\n            case \"DELETE\":\n                try {\n                    const deletedProject = await _models_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findOneAndDelete({\n                        _id: id,\n                        owner: session.user.id\n                    });\n                    if (!deletedProject) {\n                        return res.status(404).json({\n                            success: false,\n                            message: \"Project not found\"\n                        });\n                    }\n                    res.status(200).json({\n                        success: true,\n                        data: {}\n                    });\n                } catch (error2) {\n                    res.status(400).json({\n                        success: false,\n                        message: error2.message\n                    });\n                }\n                break;\n            default:\n                res.status(405).json({\n                    success: false,\n                    message: \"Method not allowed\"\n                });\n                break;\n        }\n    } catch (error3) {\n        console.error(\"Database connection error:\", error3);\n        // Fall back to in-memory storage for all users if DB connection fails\n        return handleTestUser(req, res, session, id);\n    }\n}\n// Handle test user with in-memory storage\nfunction handleTestUser(req, res, session, id) {\n    // Make sure we have the latest projects\n    testUserProjects = global.testUserProjects || [];\n    console.log(`Handling ${req.method} request for project ${id}`);\n    console.log(`Current projects: ${testUserProjects.length}`);\n    console.log(\"Test user projects:\", testUserProjects.map((p)=>({\n            id: p._id,\n            name: p.name,\n            owner: p.owner\n        })));\n    switch(req.method){\n        case \"GET\":\n            // Изменяем логику поиска проекта - ищем проект по ID без проверки владельца\n            const project = testUserProjects.find((p)=>p._id === id);\n            if (!project) {\n                console.log(`Project not found: ${id}`);\n                return res.status(404).json({\n                    success: false,\n                    message: \"Project not found\"\n                });\n            }\n            // Возвращаем копию проекта с владельцем текущего пользователя\n            // Это позволит обоим пользователям редактировать один и тот же проект\n            const projectCopy = {\n                ...JSON.parse(JSON.stringify(project)),\n                owner: session.user.id\n            };\n            console.log(`Project found: ${projectCopy.name}, returning with owner: ${projectCopy.owner}`);\n            res.status(200).json({\n                success: true,\n                data: projectCopy\n            });\n            break;\n        case \"PUT\":\n            const projectIndex = testUserProjects.findIndex((p)=>p._id === id);\n            if (projectIndex === -1) {\n                return res.status(404).json({\n                    success: false,\n                    message: \"Project not found\"\n                });\n            }\n            // Сохраняем текущего владельца проекта\n            const originalOwner = testUserProjects[projectIndex].owner;\n            // Обновляем проект, сохраняя оригинального владельца\n            testUserProjects[projectIndex] = {\n                ...testUserProjects[projectIndex],\n                ...req.body,\n                owner: originalOwner,\n                updatedAt: new Date().toISOString()\n            };\n            console.log(`Project updated: ${testUserProjects[projectIndex].name}, original owner: ${originalOwner}`);\n            // Update global reference and save to file\n            global.testUserProjects = testUserProjects;\n            if (typeof global.saveTestProjects === \"function\") {\n                global.saveTestProjects();\n            }\n            // Возвращаем копию проекта с владельцем текущего пользователя\n            const updatedProjectCopy = {\n                ...JSON.parse(JSON.stringify(testUserProjects[projectIndex])),\n                owner: session.user.id\n            };\n            res.status(200).json({\n                success: true,\n                data: updatedProjectCopy\n            });\n            break;\n        case \"DELETE\":\n            const projectToDelete = testUserProjects.find((p)=>p._id === id);\n            if (!projectToDelete) {\n                return res.status(404).json({\n                    success: false,\n                    message: \"Project not found\"\n                });\n            }\n            testUserProjects = testUserProjects.filter((p)=>p._id !== id);\n            // Update global reference and save to file\n            global.testUserProjects = testUserProjects;\n            if (typeof global.saveTestProjects === \"function\") {\n                global.saveTestProjects();\n            }\n            res.status(200).json({\n                success: true,\n                data: {}\n            });\n            break;\n        default:\n            res.status(405).json({\n                success: false,\n                message: \"Method not allowed\"\n            });\n            break;\n    }\n}\n// Handle demo mode\nfunction handleDemoMode(req, res, id) {\n    // Для режима демонстрации используем все проекты без проверки владельца\n    console.log(\"Demo mode activated for project ID:\", id);\n    console.log(\"Available test projects:\", testUserProjects.length);\n    // Проверяем, существуют ли проекты\n    if (!testUserProjects || testUserProjects.length === 0) {\n        console.log(\"No test projects available\");\n        return res.status(404).json({\n            success: false,\n            message: \"No projects available in demo mode\"\n        });\n    }\n    // Если запрашивается конкретный проект\n    if (id) {\n        // Пытаемся найти проект по ID без проверки владельца\n        let project = testUserProjects.find((p)=>p._id === id);\n        // Если проект не найден по точному совпадению, пробуем найти по частичному совпадению\n        if (!project) {\n            console.log(\"Trying partial match for ID:\", id);\n            project = testUserProjects.find((p)=>p._id && p._id.toString().includes(id));\n        }\n        // Если проект все еще не найден, возвращаем первый проект (для демонстрации)\n        if (!project && testUserProjects.length > 0) {\n            console.log(\"Using first available project for demo\");\n            project = testUserProjects[0];\n        }\n        if (project) {\n            console.log(`Returning project: ${project.name}`);\n            return res.status(200).json({\n                success: true,\n                data: project\n            });\n        }\n    }\n    // Если проект не найден, возвращаем ошибку\n    console.log(\"Project not found in demo mode\");\n    return res.status(404).json({\n        success: false,\n        message: \"Project not found\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/projects/[id].js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/projects/[id].js"));
module.exports = __webpack_exports__;

})();