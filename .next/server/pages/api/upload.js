"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/upload";
exports.ids = ["pages/api/upload"];
exports.modules = {

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("formidable");

/***/ }),

/***/ "next-auth/react":
/*!**********************************!*\
  !*** external "next-auth/react" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("next-auth/react");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/upload.js":
/*!*****************************!*\
  !*** ./pages/api/upload.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formidable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/react */ \"next-auth/react\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nconst uploadDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public/uploads\");\n// Test user ID for memory storage\nconst TEST_USER_ID = \"test-user-123\";\n// Ensure upload directory exists\nconst ensureDir = async ()=>{\n    try {\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.access(uploadDir);\n    } catch (error) {\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.mkdir(uploadDir, {\n            recursive: true\n        });\n    }\n};\n// Функция для очистки имени файла от недопустимых символов\nconst sanitizeFileName = (name)=>{\n    return name.replace(/[^a-zA-Z0-9_-]/g, \"_\");\n};\nasync function handler(req, res) {\n    // Check authentication\n    const session = await (0,next_auth_react__WEBPACK_IMPORTED_MODULE_3__.getSession)({\n        req\n    });\n    if (!session) {\n        return res.status(401).json({\n            message: \"Not authenticated\"\n        });\n    }\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        await ensureDir();\n        const form = new formidable__WEBPACK_IMPORTED_MODULE_0__.IncomingForm({\n            uploadDir,\n            keepExtensions: true,\n            maxFileSize: 10 * 1024 * 1024,\n            multiples: true\n        });\n        form.parse(req, async (err, fields, files)=>{\n            if (err) {\n                return res.status(500).json({\n                    message: \"Upload failed\",\n                    error: err.message\n                });\n            }\n            // Получаем название проекта и дату из полей запроса\n            const projectName = fields.projectName ? sanitizeFileName(fields.projectName[0]) : \"unnamed\";\n            const date = fields.date ? sanitizeFileName(fields.date[0]) : new Date().toISOString().split(\"T\")[0];\n            const dayIndex = fields.dayIndex ? parseInt(fields.dayIndex[0]) : 0;\n            // Обработка одного или нескольких файлов\n            const fileList = files.file;\n            // Если файлов нет, возвращаем ошибку\n            if (!fileList) {\n                return res.status(400).json({\n                    message: \"No files uploaded\"\n                });\n            }\n            // Преобразуем в массив, если это один файл\n            const filesArray = Array.isArray(fileList) ? fileList : [\n                fileList\n            ];\n            if (filesArray.length === 0) {\n                return res.status(400).json({\n                    message: \"No files uploaded\"\n                });\n            }\n            // Обрабатываем каждый файл\n            const uploadedFiles = await Promise.all(filesArray.map(async (file, index)=>{\n                // Формируем имя файла по схеме: название проекта_дата_img_порядковый номер_уникальный идентификатор\n                const originalFilename = file.originalFilename || \"image.jpg\";\n                const ext = path__WEBPACK_IMPORTED_MODULE_2___default().extname(originalFilename);\n                const baseIndex = fields.baseIndex ? parseInt(fields.baseIndex[0]) : 0;\n                const imageIndex = baseIndex + index;\n                // Добавляем уникальный идентификатор (текущее время в миллисекундах + случайное число)\n                const uniqueId = `${Date.now()}_${Math.floor(Math.random() * 10000)}`;\n                const filename = `${projectName}_${date}_img_${imageIndex}_${uniqueId}${ext}`;\n                // Move file to final destination\n                const finalPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, filename);\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.rename(file.filepath, finalPath);\n                // Return the path that can be used to access the file\n                return `/uploads/${filename}`;\n            }));\n            // Return the paths that can be used to access the files\n            res.status(200).json({\n                success: true,\n                urls: uploadedFiles\n            });\n        });\n    } catch (error) {\n        console.error(\"Upload error:\", error);\n        // If there's an error with file system operations, provide mock URLs for test user\n        if (session.user.id === TEST_USER_ID) {\n            // Generate fake image URLs for the test user\n            const projectName = \"test_project\";\n            const date = new Date().toISOString().split(\"T\")[0];\n            const mockImageUrls = Array(3).fill().map((_, i)=>`/mock-image-${projectName}_${date}_img_${i}.jpg`);\n            res.status(200).json({\n                success: true,\n                urls: mockImageUrls\n            });\n        } else {\n            res.status(500).json({\n                message: \"Server error\",\n                error: error.message\n            });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/upload.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/upload.js"));
module.exports = __webpack_exports__;

})();